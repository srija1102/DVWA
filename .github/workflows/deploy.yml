name: Deploy DVWA with MySQL to EKS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install Checkov
        run: pip install checkov

      - name: Run Checkov (IaC scan)
        run: |
          mkdir -p logs
          checkov -d kube/ -o json > logs/checkov.json || true

      - name: Install Python dependencies
        run: pip install pandas scikit-learn

      - name: Run AI Threat Classifier (initial)
        run: python3 scripts/classify_threats.py || true

      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin

      - name: Scan Docker image with Trivy
        run: |
          IMAGE_URI=911167907462.dkr.ecr.us-east-1.amazonaws.com/dvwa:latest
          docker build -t $IMAGE_URI .
          trivy image --format json --output logs/trivy_results.json $IMAGE_URI || true

#      - name: Archive Security Logs
#        uses: actions/upload-artifact@v2
#        with:
#          name: security-logs
#          path: logs/

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} \
          | docker login --username AWS --password-stdin 911167907462.dkr.ecr.us-east-1.amazonaws.com/dvwa

      - name: Build and Push Docker image
        run: |
          IMAGE_URI=911167907462.dkr.ecr.us-east-1.amazonaws.com/dvwa:latest
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig \
            --region ${{ secrets.AWS_REGION }} \
            --name ${{ secrets.EKS_CLUSTER_NAME }}

      - name: Deploy to EKS
        run: |
          echo "Deploying k8s manifests..."
          kubectl apply -f kube/ --validate=false

      - name: Wait for DVWA to boot
        run: sleep 30

      - name: Run DVWA setup
        run: curl -s http://${{ secrets.LOAD_BALANCER_URL }}/setup.php

      - name: Set DVWA security level to 'low'
        run: |
          curl -s -X POST http://${{ secrets.LOAD_BALANCER_URL }}/security.php \
            -d 'security=low&seclev_submit=Submit'

      - name: Run OWASP ZAP Full Scan
        run: |
          mkdir -p logs
          docker run --rm -v ${{ github.workspace }}/logs:/zap/wrk/:rw \
            ghcr.io/zaproxy/zaproxy:stable zap-full-scan.py \
            -t http://${{ secrets.LOAD_BALANCER_URL }} \
            -J zap_results.json \
            -r zap_report.html || true

      - name: Classify Final Threats
        run: python3 scripts/classify_threats.py || true

  notify:
    needs: deploy
    if: always()
    runs-on: ubuntu-latest

    steps:
      - name: Determine outcome
        id: outcome
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "status=SUCCESS ✅" >> $GITHUB_OUTPUT
          else
            echo "status=FAILURE ❌" >> $GITHUB_OUTPUT
          fi

      - name: Summarize Threat Levels
        id: threat_summary
        run: |
          if [ -f logs/classified_results.csv ]; then
            HIGH=$(grep -c 'High' logs/classified_results.csv || true)
            LOW=$(grep -c 'Low' logs/classified_results.csv || true)
            echo "high=$HIGH" >> $GITHUB_OUTPUT
            echo "low=$LOW" >> $GITHUB_OUTPUT
          else
            echo "high=0" >> $GITHUB_OUTPUT
            echo "low=0" >> $GITHUB_OUTPUT
          fi

      - name: Send email notification with attachments
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          secure: true
          username: ${{ secrets.MAIL_USERNAME }}
          password: ${{ secrets.MAIL_PASSWORD }}
          to: ${{ secrets.MAIL_RECIPIENT }}
          from: DVWA CI/CD Pipeline
          subject: "GitHub Actions: DVWA Deployment ${{ steps.outcome.outputs.status }}"
          body: |
            Your GitHub Actions pipeline for DVWA has completed.

            ✅ Status: ${{ steps.outcome.outputs.status }}

            🔍 Threat Classification Summary:
            - High Severity: ${{ steps.threat_summary.outputs.high }}
            - Low Severity: ${{ steps.threat_summary.outputs.low }}

            📦 Logs include:
            - Checkov (IaC scan)
            - ZAP (Web app scan)
            - Trivy (Image scan)
            - AI-based threat classification

            📎 Attached: `classified_results.csv`, `zap_results.json`, and `zap_report.html`

            🔗 View full logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          attachments: |
            logs/classified_results.csv
            logs/zap_results.json
            logs/zap_report.html

